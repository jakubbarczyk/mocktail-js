"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var mocktail_1=require("../src/mocktail");describe("Mocktail Expression Language",function(){describe("mocktail",function(){it("should return empty object when the argument is undefined",function(){expect(mocktail_1.mocktail(void 0)).toEqual({})}),it("should return empty object when the argument is null",function(){expect(mocktail_1.mocktail(null)).toEqual({})}),it("should return empty object when the argument is number",function(){expect(mocktail_1.mocktail(123)).toEqual({})}),it("should return empty object when the argument is array",function(){expect(mocktail_1.mocktail([])).toEqual({})}),it("should return empty object when the argument is object",function(){expect(mocktail_1.mocktail({})).toEqual({})}),it("should mock off of deep pattern",function(){var o={foo:{bar:123}};expect(mocktail_1.mocktail("foo.bar",123)).toEqual(o)}),it("should mock off of wide pattern",function(){var o={bar:123,foo:456};expect(mocktail_1.mocktail("bar,foo",123,456)).toEqual(o)}),it("should mock off of fork pattern",function(){var o={foo:{bar:123,baz:456}};expect(mocktail_1.mocktail("foo:bar,baz;",123,456)).toEqual(o)}),it("should mock off of deep and wide pattern",function(){var o={bar:{foo:123},boo:{hoo:{baz:456}}};expect(mocktail_1.mocktail("bar.foo,boo.hoo.baz",123,456)).toEqual(o)}),it("should mock off of deep and wide and fork pattern",function(){var o={ban:{baz:{bar:123},foo:456},boo:{hoo:789},moo:void 0};expect(mocktail_1.mocktail("ban:baz.bar,foo;boo.hoo,moo",123,456,789)).toEqual(o)})})});